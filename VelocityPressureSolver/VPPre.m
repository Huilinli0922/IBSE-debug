function grandSC = VPPre(boundary_data, diff_operators, operators)
%	VPPre  preprocessing to solve Navier Stokes equation with 
%                                           pressure velocity format.
%
%       J. Mac Huang, 06/18/2016
%       final version 05/04/2023
%       AML DT, sculpt candy project
%
%   Stokes Problem:   L*u + p_x = XO*fu
%                     L*v + p_y = XO*fv
%                     u_x + v_y = XO*fp
%
%                     L is the Helmholtz operator, Helmholtz_Op
%
%
%   Inputs:  boundary_data, diff_operators, operators generated by
%            corresponding functions
%
%   Outputs: grandSC      - grand Shur complement
%
%

% grab all the data
[X, Y, nx, ny, Xw1, Yw1, Xw2, Yw2, XE, XEw, XO] = boundary_data{:};
[Laplacian, invLaplacian, Helmholtz_Op, inv_Helmholtz_Op, inv_H, N, sigma, IBSEk, dx, dy, inv_dx, inv_dy, inv_H_lower, inv_H_higher] ...
                    = diff_operators{:};
[Sn, normD, S, ST, STn, T, TT, T_1, T_2, T_3, R_1, R_2, R_3] ...
                    = operators{:};

% get all the length                
nbdy = length(X); nwall = length(Xw1); N = sqrt(length(XO));


% detect the order of method
if  IBSEk ==1
    Tn = T_1; R = R_1; Tn_lower = S; TT_lower = ST;
elseif IBSEk ==2
    Tn = T_2; R = R_2; Tn_lower = T_1; TT_lower = [ST; R_1];
elseif IBSEk == 3
    Tn = T_3; R = R_3; Tn_lower = T_2; TT_lower = [ST; R_2];
else 
    error('unknown order of IBSE')
end

% get other vector length              
length_T_u = size(Tn,2); length_T_p = size(Tn_lower,2); 
length_all = length_T_u*2 + length_T_p;

% allocate grandSC
grandSC = zeros(size(R,1)*2 + size(ST,1)*2 + size(TT_lower,1));

% prepare all the elements of grandSC
parfor k = 1:length_all
    RHS = zeros(length_all,1); RHS(k) = 1;
    
    % forcing for omega and psi
    Fu = RHS(1:length_T_u); Fv = RHS(length_T_u+1:2*length_T_u);
    Fp = RHS(2*length_T_u+1:end);
    
    % get xi value of u, v, p (25c-d)
    xi_u = operator(Tn*Fu, inv_H); xi_v = operator(Tn*Fv, inv_H);
    xi_p = operator(Tn_lower*Fp, inv_H_lower);
    
    % compute corresponding u, v (38a-c)
    fp = (1-XO).*(operator(xi_u, dx)+operator(xi_v, dy));
    fu = (1-XO).*(operator(xi_u, Helmholtz_Op)+operator(xi_p, dx));
    fv = (1-XO).*(operator(xi_v, Helmholtz_Op)+operator(xi_p, dy));
    [u, v, p] = StokesSolver(boundary_data, diff_operators, operators, fu, fv, fp);
    
    % put in elements of grandSC
    grandSC(:,k) = [ST*u; ...
                    ST*v; ...
                    R*(u-xi_u);...
                    R*(v-xi_v);...
                    TT_lower*(p-xi_p)];
end

end
